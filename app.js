/* *
 * express server application
 */

// require express web framework 
var express = require('express'),

    // require core node module for paths this helps with different platforms (mac, linux, windoes) 
    path = require('path'),

    // used for locating and serving a favicon.ico 
    favicon = require('serve-favicon'),

    // middleware for logging http requests to the console 
    logger = require('morgan'),

    // to parse cookie headers 
    cookieParser = require('cookie-parser'),

    // no longer part of the express core, used to parse the request body to interface with 
    bodyParser = require('body-parser'),

    //  using passports local strategy for authentication     
    passport = require('passport'),
    localStrategy = require('passport-local').Strategy,

    // require our user schema for authentication 
    User = require('./models/user.js'),

    // create app
    app = express();


// require database connection every time the server boots 
require('./lib/connection');

// view engine setup 
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');


/**
 * define middleware
 */
// set the static file location
app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
// log requests to the console 
app.use(logger('dev'));
// parse application/json 
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({
    extended: false
}));
app.use(cookieParser());
app.use(require('express-session')({
    secret: 'chocolate rain',
    resave: false,
    saveUninitialized: false
}));
app.use(passport.initialize());
app.use(passport.session());
app.use(express.static(path.join(__dirname, 'public')));

// configure express to serve bower components when developing 
app.use('/bower_components', express.static(__dirname + '/bower_components'));

// configure passport 
passport.use(new localStrategy(User.authenticate()));
passport.serializeUser(User.serializeUser());
passport.deserializeUser(User.deserializeUser());


/** 
 * application routes 
 */

// index page 
app.use('/', require('./routes/index'));
// used for serving up jade partials 
app.get('/partial/:name', function(req, res) {
    var name = req.params.name;
    res.render('partials/' + name);
});


/**
 * API
 */
// create our user noun 
app.use('/user/', require('./routes/user.js'));
// create our item noun 
app.use('/item/', require('./routes/item.js'));



/** 
 * Error handling generated by express generator
 */

// catch 404 and forward to error handler
app.use(function(req, res, next) {
    var err = new Error('Not Found');
    err.status = 404;
    next(err);
});

// development error handler
// will print stacktrace
if (app.get('env') === 'development') {
    app.use(function(err, req, res, next) {
        res.status(err.status || 500);
        res.render('error', {
            message: err.message,
            error: err
        });
    });
}

// production error handler
// no stacktraces leaked to user
app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    res.render('error', {
        message: err.message,
        error: {}
    });
});

module.exports = app;
